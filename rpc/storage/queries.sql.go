// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package storage

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
insert into posts (title, author, post_state, body)
values ($1, $2, $3, $4)
returning id
`

type CreatePostParams struct {
	Title     sql.NullString
	Author    sql.NullString
	PostState NullState
	Body      sql.NullString
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Author,
		arg.PostState,
		arg.Body,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const delete = `-- name: Delete :one
delete from posts where id = $1 returning id
`

func (q *Queries) Delete(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, delete, id)
	err := row.Scan(&id)
	return id, err
}

const getAllHeaders = `-- name: GetAllHeaders :many
select id,title,author from posts 
where post_state = 'readable'
`

type GetAllHeadersRow struct {
	ID     int32
	Title  sql.NullString
	Author sql.NullString
}

func (q *Queries) GetAllHeaders(ctx context.Context) ([]GetAllHeadersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllHeaders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllHeadersRow
	for rows.Next() {
		var i GetAllHeadersRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Author); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHeaders = `-- name: GetHeaders :many
select id,title,author from posts 
where post_state = 'readable'
limit $1
`

type GetHeadersRow struct {
	ID     int32
	Title  sql.NullString
	Author sql.NullString
}

func (q *Queries) GetHeaders(ctx context.Context, limit int32) ([]GetHeadersRow, error) {
	rows, err := q.db.QueryContext(ctx, getHeaders, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHeadersRow
	for rows.Next() {
		var i GetHeadersRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Author); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
select id, title, author, post_state, body from posts 
where id = $1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.PostState,
		&i.Body,
	)
	return i, err
}

const update = `-- name: Update :one
update posts 
set title = $1,
    author = $2,
    body = $3
where id = $4
returning id,title,author
`

type UpdateParams struct {
	Title  sql.NullString
	Author sql.NullString
	Body   sql.NullString
	ID     int32
}

type UpdateRow struct {
	ID     int32
	Title  sql.NullString
	Author sql.NullString
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (UpdateRow, error) {
	row := q.db.QueryRowContext(ctx, update,
		arg.Title,
		arg.Author,
		arg.Body,
		arg.ID,
	)
	var i UpdateRow
	err := row.Scan(&i.ID, &i.Title, &i.Author)
	return i, err
}
